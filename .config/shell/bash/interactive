#-------------------------------------------------------------------------------
# Bash interactive configuration
#-------------------------------------------------------------------------------

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

source ~/.config/shell/generic/interactive

# General configuration
#-------------------------------------------------------------------------------

# Save history in an XDG compliant directory.
[[ ! -d "$DATA_DIR" ]] && mkdir -p "$DATA_DIR"
export HISTFILE=$XDG_DATA_HOME/bash/bash_history

# GNU readline configuration
export INPUTRC=~/.config/readline/config

# Aliases
#-------------------------------------------------------------------------------

alias edit="$EDITOR"
alias exa="exa --group-directories-first"
alias sysyadm="sudo yadm --yadm-dir /etc/yadm --yadm-data /etc/yadm/data"

alias gs="git status"
alias gsu="git status -u"
alias gl="git log --pretty='%C(yellow)[%h]%C(reset) %<(16,trunc)%ad %C(cyan)%an%C(reset) %C(green)%s%C(reset)' --date=format:'%Y-%m-%d %H:%M'"
alias gd="git diff"
alias gds="git diff --staged"
alias ga="git add"
alias gaa="git add -A"
alias gc="git commit -m"
alias gca="git commit --amend"
alias gco="git checkout"
alias gp="git push"
alias gpf="git push --force"
alias grb="git rebase -i"
alias grc="git rm --cached"
alias e="edit"
alias ed="edit"
alias edi="edit"
alias ex="exa"
alias ls="exa -l"
alias lsa="exa -al"
alias lsi="exa -l --git-ignore"
alias lst="exa -lT --git-ignore"

# Colors
#-------------------------------------------------------------------------------

# Import and parse system colors.
source $XDG_CONFIG_HOME/theme/theme.sh

# Prompt
#-------------------------------------------------------------------------------

# TODO: Handle differences in terminal capabilities. see: `TERM=`
construct_prompt() {
    local time="$(colors_ansi_fg $primary_12)\t$(colors_ansi_reset) "
    local user=""
    local hostname=""

    if [[ $(whoami) == "root" ]]; then
        user="$(colors_ansi_fg $l2_red)\u$(colors_ansi_reset)"
        hostname="@\h "
    fi

    local git_modified_color="$(colors_ansi_fg $d1_green)"

    local git_status=$(git status 2>/dev/null | grep "Your branch is ahead" 2>/dev/null)
    if [[ "$git_status" != "" ]]; then
        git_modified_color="$(colors_ansi_fg $l1_orange)"
    fi

    local git_status=$(git status --porcelain 2>/dev/null)
    if [[ "$git_status" != "" ]]; then
        git_modified_color="$(colors_ansi_fg $l1_orange)"
    fi

    local git_branch=$(git branch --show-current 2>/dev/null)
    if [[ "$git_branch" != "" ]]; then
        git_branch="$git_modified_color $git_branch$(colors_ansi_reset) "
    fi

    local cwd="$(colors_ansi_fg $primary_12) \w$(colors_ansi_reset) "
    local prompt="$(colors_ansi_fg $text_7)\$$(colors_ansi_reset) "

    PS1="$time$user$hostname$git_branch$cwd$prompt"
}
PROMPT_COMMAND='construct_prompt'

# Python environment
#-------------------------------------------------------------------------------
if command -v pyenv &> /dev/null
then
    eval "$(pyenv init -)"
fi

